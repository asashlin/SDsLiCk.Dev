`XBLDR ver ?.0
?Options: 		Token Default			` using a default set of options, but note Comments need to be explicitly defined - can be a " 's' " on line options line where 's' is the comment symbol or symbols
`?Comments:		inline,multiline='/*','*/' | line='//'  `Example of C like comments  specification which is part of the ?Style "C" settings  
?Comments:		inline,line='`'	` indicates 1.) inline and line comments available, but multiline is not, 2. '`' begins and ends inline and also begins line comments

GrammaDefParse:	InitOptDclr [OptionDclr | TokenDclr | StatesDclr]* GrammaDclr [OptionDclr | TokenDclr | StatesDclr | GrammaDclr]*  `Minium Gramma Definition requires an Initial Options section and a Gramma Definition Section

InitOptDclr:	&BOL ...

OptionDclr:		&BOL ...

StatesDclr:		&BOL ...

TokenDclr:		&BOL ...

GrammaDclr:		[&BOL GrammaName ':' [GrammaDef]]+				` 

GrammaDef:		[GrammaGrp | GrammaAlt | GrammaItem | OptGramma]+

GrammaGrp:		'(' GrammaDef ')'

GrammaDefAlt:	GrammaDef '|' GrammaDef 

GrammaItem:		GrammaName | TokenRef

OptGramma:		'[' [TokenRef]+ ','] GrammaDef ']' + (&Empty | '*' | '+' | '#')$= { =($GrammaDefSet, $=) }
			    `'=(...)'  indicates a method OptGramma(string grammaDefSet, string group) is called. '$=' returns whole group, in this case one of alts If "$=type" is used, "OptionalStd(string grammaDefSet, string type)" is generated instead


/End

&BOL
&EOL
&EOF

**GrammaDefParse:	InitOptDclr [OptionDclr | TokenDclr | StatesDclr]* GrammaDclr [OptionDclr | TokenDclr | StatesDclr | GrammaDclr]*  `Minium Gramma Definition requires an Initial Options section and a Gramma Definition Section
GrammaDefParse: 	InitOptDclr GrammaDclr    ' simplified gramma for 1st cut

**InitOptDclr:	&BOL ...

**OptionDclr:		&BOL ...

**StatesDclr:		&BOL ...

**TokenDclr:		&BOL ...

**GrammaDclr:		[&BOL GrammaName ':' [GrammaDef]]+				` 
GrammaDclr: &BOL GrammaName ':' > GrammaDef [Return]
GrammaName &Empty [Rebase]

@&BOL &Identifier ':' > 
&Empty <

**GrammaName: &Identifier

GrammaDclr: &BOL [GrammaName ':' [GrammaDef]]+	

**GrammaDef:		[GrammaGrp | GrammaAlt | GrammaItem | OptGramma]+
GrammaDef:		(GrammaGrp | GrammaAlt | GrammaItem | OptGramma) (GrammaGrp | GrammaAlt | GrammaItem | OptGramma]+

GrammaGrp:		'(' GrammaDef ')'

GrammaDefAlt:	GrammaDef '|' GrammaDef 

GrammaItem:		GrammaName | TokenRef

OptGramma:		'[' [TokenRef]+ ','] GrammaDef ']' + (&Empty | '*' | '+' | '#')$= { =($GrammaDefSet, $=) }
			    `'=(...)'  indicates a method OptGramma(string grammaDefSet, string group) is called. '$=' returns whole group, in this case one of alts If "$=type" is used, "OptionalStd(string grammaDefSet, string type)" is generated instead

